name: Python CI

on:
  pull_request:
    branches: [dev]
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: "Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)"
        required: false
        default: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  python-ci:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12", "3.13"]
    steps:
      # Enable tmate debugging of manually-triggered workflows if the input option was provided
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}

      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
      - name: Setup poetry
        run: |
          pip install poetry
          poetry install --no-interaction --no-ansi
      - name: Run static tests
        run: poetry run invoke python.test

  python-build:
    runs-on: ubuntu-latest
    needs: python-ci
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          pip install poetry
          poetry install --no-interaction --no-ansi --only main

      - name: Build package
        run: poetry run invoke python.build

      - name: Upload package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: package-artifacts
          path: dist/*.whl

  python-e2e-test:
    runs-on: ${{ matrix.os }}
    needs: python-build
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.12"

      - name: Download package artifacts
        uses: actions/download-artifact@v4
        with:
          name: package-artifacts

      - name: Install package with pipx
        shell: bash
        run: |
          python -m pip install --user pipx  --break-system-packages
          pipx_bin_path="$(python -m pipx environment --value PIPX_BIN_DIR)"
          echo "$pipx_bin_path" >> $GITHUB_PATH
          whl_file="$(find . -name "*.whl" -print -quit)"
          pipx install "${whl_file}" --force
          pipx list
      - name: Run end-to-end tests
        run: |
          pipx list
          template --help
